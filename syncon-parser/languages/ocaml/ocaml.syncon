// This file is transliterated fairly literally from http://caml.inria.fr/pub/docs/manual-ocaml/language.html
// Any additions or changes made can be found at the end of the file, most of the initial stuff is made as direct a translation as possible

comment "\\(\\*" "\\*\\)"

comment "# *\\d+ *(\"([^\"\\\\]|\\\\[\\\\nrtb'\"[:space:]]|\\\\[0-9][0-9][0-9]|\\\\x[0-9a-fA-F][0-9a-fA-F]|\\\\o[0-7][0-7][0-7])*\")?"

type Ident
syncon lowerIdent: Ident = id:LowerIdent
syncon upperIdent: Ident = id:UpperIdent
token UpperIdent = "[[:upper:]][[:alnum:]_']*"   // was called "capitalized-ident"
token LowerIdent = "[[:lower:]_][[:alnum:]_']*"  // was called "lowercase-ident"

token Integer = "(((0x|0X)[0-9a-fA-F][0-9a-fA-F_]*)|((0o|0O)[0-7][0-7_]*)|((0b|0B)[0-1][0-1_]*)|([0-9][0-9_]*))[lLn]?"  // was called "integer-literal"

// TODO: this does not include hexadecimal notation for floats
// NOTE: the original made both decimal point and e notation optional, but that makes it overlap with
//       Integer, so I've here changed it to require at least one of them (messy regex)
token Float = "-?(0[xX][0-9a-fA-F][0-9a-fA-F_]*\\.[0-9a-fA-F_]*([pP][-+]?\\d[0-9_]*)?)|[0-9][0-9_]*((\\.[0-9_]*)([eE][+\\-]?[0-9][0-9_])?|(\\.[0-9_]*)?([eE][+\\-]?[0-9][0-9_]))" // was called "float-literal"

token Character = "'([^'\\\\]|\\\\[\\\\nrtb'\"[:space:]]|\\\\[0-9][0-9][0-9]|\\\\x[0-9a-fA-F][0-9a-fA-F]|\\\\o[0-7][0-7][0-7])'"
// TODO: strings also have \u{} and \<newline>
token String = "\"([^\"\\\\]|\\\\[\\\\nrtb'\"[:space:]]|\\\\[0-9][0-9][0-9]|\\\\x[0-9a-fA-F][0-9a-fA-F]|\\\\o[0-7][0-7][0-7])*\""
token QuotString = "({\\|([^|]|\\|[^}])*\\|})"

// TODO: these are defined as tokens as opposed to a sequence of other terminals to avoid ambiguity, see if we can get away with the "proper" way to do it
token Label = "~[[:lower:]_][[:alnum:]_']*"
token LabelColon = "~[[:lower:]_][[:alnum:]_']*:"
token OptLabel = "\\?[[:lower:]_][[:alnum:]_']*"
token OptLabelColon = "\\?[[:lower:]_][[:alnum:]_']*:"

token PrefixSymbol = "![!$%&*+\\-./:<=>?@^|~]*|[?~][!$%&*+\\-./:<=>?@^|~]+"
token HashSymbol = "#[!$%&*+\\-./:<=>?@^|~]+"
token StarStarSymbol = "\\*\\*[!$%&*+\-./:<=>?@^|~]*"
token StarSymbol = "\\*([!$%&+\-./:<=>?@^|~][!$%&+\-./:<=>?@^|~]*)?"
token DivSymbol = "/[!$%&*+\-./:<=>?@^|~]*"
token PercentSymbol = "%[!$%&*+\-./:<=>?@^|~]*"
token PlusSymbol = "\\+[!$%&*+\-./:<=>?@^|~]*"
token MinusSymbol = "-[!$%&*+\-./:<=>?@^|~]*"
token AtSymbol = "@[!$%&*+\-./:<=>?@^|~]*"
token CaretSymbol = "\\^[!$%&*+\-./:<=>?@^|~]*"
token EqualSymbol = "=[!$%&*+\-./:<=>?@^|~]*"
token LessThanSymbol = "<[!$%&*+\-./:<=>?@^|~]*"
token GreaterThanSymbol = ">[!$%&*+\-./:<=>?@^|~]*"
token BarSymbol = "\\|[!$%&*+\-./:<=>?@^|~]*"
token AndSymbol = "&[!$%&*+\-./:<=>?@^|~]*"
token DollarSymbol = "$[!$%&*+\-./:<=>?@^|~]*"

// === 7.3 Names ===

// The first elements here should eventually be binding interacting types, i.e., thin wrapper types around (one or more) token types, but for now they're just syntax types with a single syncon per

type ValueName
syncon valueName: ValueName = n:LowerIdent
syncon operatorName: ValueName = "(" on:OperatorName ")"

type OperatorName
syncon preOpName: OperatorName = n:PrefixSymbol
syncon hashOpName: OperatorName = n:HashSymbol
syncon starStarOpName: OperatorName = n:StarStarSymbol
syncon starOpName: OperatorName = n:StarSymbol
syncon divOpName: OperatorName = n:DivSymbol
syncon percentOpName: OperatorName = n:PercentSymbol
syncon plusOpName: OperatorName = n:PlusSymbol
syncon minusOpName: OperatorName = n:MinusSymbol
syncon atOpName: OperatorName = n:AtSymbol
syncon caretOpName: OperatorName = n:CaretSymbol
syncon equalOpName: OperatorName = n:EqualSymbol
syncon lessThanOpName: OperatorName = n:LessThanSymbol
syncon greaterThanOpName: OperatorName = n:GreaterThanSymbol
syncon barOpName: OperatorName = n:BarSymbol
syncon andOpName: OperatorName = n:AndSymbol
syncon dollarOpName: OperatorName = n:DollarSymbol
syncon reservedOpName: OperatorName =
 (star:"*" | plus:"+" | minus:"-" | floatMinus:"-." | eq:"=" | neq:"!=" |
  lt:"<" | gt:">" | or:"or" | barOr:"||" | and:"&" | doubleAnd:"&&" |
  assign:":=" | mod:"mod" | land:"land" | lor:"lor" | lxor:"lxor" |
  lsl:"lsl" | lsr:"lsr" | asr:"asr")
// TODO: insert parenthesized operator names here (maybe)

type LabelName
syncon labelName: LabelName = n:LowerIdent

type ConstrName
syncon constrName: ConstrName = n:UpperIdent

type TagName
syncon tagName: TagName = n:Ident

type TypeConstrName
syncon typeConstrName: TypeConstrName = n:LowerIdent

type FieldName
syncon fieldName: FieldName = n:LowerIdent

type ModuleName
syncon moduleName: ModuleName = n:UpperIdent

type ModTypeName
syncon modTypeName: ModTypeName = n:LowerIdent
syncon upperModTypeName: ModTypeName = n:UpperIdent

type ClassName
syncon className: ClassName = n:LowerIdent

type InstVarName
syncon instVarName: InstVarName = n:LowerIdent

type MethodName
syncon methodName: MethodName = n:LowerIdent

// The second set of elements here are things that can be referred to with a path, i.e., qualified.
// Again, there should be some form of support for something like this, but for the moment that is
// not the case.

type ValuePath
syncon valuePath: ValuePath = (mn:ModulePath ".")? n:ValueName

type Constr
syncon constr: Constr = (mn:ModulePath ".")? n:ConstrName

type TypeConstr
syncon typeConstr: TypeConstr = (mn:ExtendedModulePath ".")? n:TypeConstrName

type Field
syncon field: Field = (mn:ModulePath ".")? n:FieldName

type ModTypePath
syncon modTypePath: ModTypePath = (mn:ExtendedModulePath ".")? n:ModTypeName

type ClassPath
syncon classPath: ClassPath = (mn:ModulePath ".")? n:ClassName

type ClassTypePath
syncon classTypePath: ClassTypePath = (mp:ExtendedModulePath ".")? n:ClassName

type ModulePath
syncon modulePath: ModulePath = (mn:ModuleName ".")* m:ModuleName

type ExtendedModulePath
syncon extendedModulePath: ExtendedModulePath =
  mh:ModuleName ("(" mhp:ExtendedModulePath ")")?
  ("." mt:ModuleName ("(" mtp:ExtendedModulePath ")")?)*

// === 7.4 Type Expressions ===

type TypExpr
grouping "(" TypExpr ")"

syncon tyVar: TypExpr = "'" id:Ident
syncon anonType: TypExpr = "_"
infix right funType: TypExpr = "->"
prefix labeledFunType: TypExpr = ((opt:"?"? l:LabelName | l2:OptLabel) ":" | l3:OptLabelColon) a:TypExpr "->"
infix prodType: TypExpr = "*" (inner:TypExpr "*")*
syncon simpleTypeConstr: TypExpr = n:TypeConstr
postfix unaryTypeConstr: TypExpr = n:TypeConstr
syncon manyTypeConstr: TypExpr = "(" head:TypExpr ("," tail:TypExpr)+ ")" n:TypeConstr
postfix asTyVar: TypExpr = "as" "'" id:Ident
syncon trivObjectTy: TypExpr = "<" row:".."? ">"
syncon objectTy: TypExpr =
  "<" (mn1:MethodName ":" ty1:PolyTypExpr)
  (";" mn2:MethodName ":" ty2:PolyTypExpr)*
  (";" | ";" row:"..")? ">"
syncon hashType: TypExpr = "#" cp:ClassPath
postfix unaryHashType: TypExpr = "#" cp:ClassPath
syncon manyHashType: TypExpr = "(" head:TypExpr ("," tail:TypExpr)+ ")" "#" cp:ClassPath
syncon knownPolyTag: TypExpr =
  "[" ( ty1:TypExpr? "|" ts1:TagSpec
      | "`" tn1:TagName ("of" tyo1:TypExpr)?)
   ("|" ts2:TagSpec)* "]"
syncon openPolyTag: TypExpr =
  "[>" ts1:TagSpec? ("|" ts2:TagSpec)* "]"
syncon closedPolyTag: TypExpr =
  "[<" "|"? ts1:TagSpecFull ("|" ts2:TagSpecFull)* (">" ("`" tn:TagName)+)? "]"

type TagSpec
syncon explicitTagSpec: TagSpec = "`" tn1:TagName ("of" tyo1:TypExpr)?
syncon exprTagSpec: TagSpec = ty:TypExpr

type TagSpecFull
syncon explicitTagSpecFull: TagSpecFull =
  "`" tn1:TagName ("of" "&"? tyo1:TypExpr ("&" tyo2:TypExpr))?
syncon exprTagSpecFull: TagSpecFull = ty:TypExpr

type PolyTypExpr
syncon nonPoly: PolyTypExpr = ty:TypExpr
syncon poly: PolyTypExpr = ("'" i:Ident)+ "." ty:TypExpr

precedence {
  unaryTypeConstr;
  unaryHashType;
  prodType;
  funType labeledFunType;
  asTyVar;
}

// === 7.5 Constants ===

// These are just put into Exp and Pat directly. Empty list, array, and begin end are joined with their
// non-empty versions.
// BUG in manual grammar: begin end is not a valid pattern, which the manual suggests

syncon intLit: Exp = i:Integer
syncon floatLit: Exp = f:Float
syncon charLit: Exp = c:Character
syncon stringLit: Exp = s:String
syncon quotStringLit: Exp = s:QuotString
syncon constrLit: Exp = c:Constr
syncon trueLit: Exp = "true"
syncon falseLit: Exp = "false"
syncon unitLit: Exp = "()"
syncon tagLit: Exp = "`" t:TagName

syncon intPat: Pat = neg:"-"? i:Integer
syncon floatPat: Pat = f:Float
syncon charPat: Pat = c:Character
syncon stringPat: Pat = s:String
syncon constrPat: Pat = c:Constr
syncon truePat: Pat = "true"
syncon falsePat: Pat = "false"
syncon unitPat: Pat = "()"
syncon tagPat: Pat = "`" t:TagName

// === 7.6 Patterns ===

type Pat
grouping "(" Pat ")"

syncon bindPat: Pat = n:ValueName
syncon wildPat: Pat = "_"
postfix asPat: Pat = "as" n:ValueName
syncon typedPat: Pat = "(" p:Pat ":" ty:TypExpr ")"
infix left orPat: Pat = "|"
prefix constrAppPat: Pat = c:Constr
prefix tagAppPat: Pat = "`" t:TagName
syncon tagShortPat: Pat = "#" ty:TypeConstr
infix tupPat: Pat = "," (inner:Pat ",")*
syncon listPat: Pat = "[" (head:Pat (";" tail:Pat)* ";"?)? "]"
infix right consPat: Pat = "::"
syncon arrayPat: Pat = "[|" (head:Pat (";" tail:Pat)* ";"?)? "|]"
syncon charRangePat: Pat = a:Character ".." b:Character
prefix lazyPat: Pat = "lazy" ("%" ext:AttrId)? attr:Attribute*  // Technically from chapter 8.3, but eh

syncon recordPat: Pat =
  "{" f:Field (":" ty:TypExpr)? ("=" p:Pat)?
  (";" ft:Field (":" tyt:TypExpr)? ("=" pt:Pat)?)*
  (";" w:"_")? ";"? "}"

precedence {
  lazyPat;
  constrAppPat tagAppPat;
  consPat;
  tupPat;
  orPat;
  asPat;
}

// === 7.7 Expressions ===

type Exp
grouping "(" Exp ")"

syncon identExp: Exp = id:ValuePath
syncon beginEnd: Exp = "begin" ("%" ext:AttrId)? attr:Attribute* e:Exp? "end"
syncon typeAnnotation: Exp = "(" e:Exp ":" t:TypExpr ")"
infix tuple: Exp = "," (inner:rec ",")*
prefix constrExp: Exp = c:Constr
prefix tagExp: Exp = "`" t:TagName
infix right consExp: Exp = "::"
syncon list: Exp = "[" (head:Exp (";" tail:Exp)* ";"?)? "]"
syncon array: Exp = "[|" (head:Exp (";" tail:Exp)* ";"?)? "|]"
syncon record: Exp =
  "{" f:Field (":" ty:TypExpr)? ("=" val:Exp)?
  (";" ft:Field (":" tyt:TypExpr)? ("=" valt:Exp)?)*
  ";"? "}"
syncon recordUpdate: Exp =
  "{" record:Exp "with"
  f1:Field (":" ty1:TypExpr)? ("=" v1:Exp)?
  (";" f2:Field (":" ty2:TypExpr)? ("=" v2:Exp)?)*
  ";"? "}"
postfix application: Exp =
  ( e1:rec
  | l1:Label (":" e2:rec)?
  | l2:LabelColon e3:rec
  | l3:OptLabel (":" e4:rec)?
  | l4:OptLabelColon e5:rec
  )+
prefix neg: Exp = "-"
prefix negFloat: Exp = "-."
infix left product: Exp = "*"
infix left sum: Exp = "+"
infix left difference: Exp = "-"
infix left differenceFloat: Exp = "-."
infix left equal: Exp = "="
infix left notEqual: Exp = "!="
infix left lessThan: Exp = "<"
infix left greaterThan: Exp = ">"
infix right orText: Exp = "or"
infix right or: Exp = "||"
infix right andSingle: Exp = "&"
infix right andDouble: Exp = "&&"
infix right refAssign: Exp = ":="
infix left mod: Exp = "mod"
infix left land: Exp = "land"
infix left lor: Exp = "lor"
infix left lxor: Exp = "lxor"
infix right lsl: Exp = "lsl"
infix right lsr: Exp = "lsr"
infix right asr: Exp = "asr"
postfix fieldAccess: Exp = "." f:Field
infix right fieldUpdate: Exp = "." f:Field "<-"
postfix arrayAccess: Exp = "." "(" e:Exp ")"
infix right arrayUpdate: Exp = "." "(" e:Exp ")" "<-"
postfix stringAccess: Exp = "." "[" e:Exp "]"
infix right stringUpdate: Exp = "." "[" e:Exp "]" "<-"
prefix if: Exp = "if" ("%" ext:AttrId)? attr:Attribute* c:Exp "then" (t:Exp "else")?
syncon while: Exp = "while" ("%" ext:AttrId)? attr:Attribute* c:Exp "do" b:Exp "done"
syncon for: Exp = "for" ("%" ext:AttrId)? attr:Attribute* v:ValueName "=" e1:Exp "to" e2:Exp "do" b:Exp "done"
syncon forDownto: Exp = "for" v:ValueName "=" e1:Exp "downto" e2:Exp "do" b:Exp "done"
infix right seqComp: Exp = ";"
prefix match: Exp =
  "match" ("%" ext:AttrId)? attr:Attribute* e:Exp "with"
  "|"? p1:Pat ("when" c1:Exp)? "->"
  ((refutation:"."|r:Exp) "|" p2:Pat ("when" c:Exp)? "->")*
syncon matchRefutation: Exp =
  "match" ("%" ext:AttrId)? attr:Attribute* e:Exp "with"
  ( p1:Pat ("when" c1:Exp)? "->" refutation1:"."
  | ("|" p2:Pat ("when" c2:Exp)? "->" (refutation2:"."|r2:Exp))*
    "|" p3:Pat ("when" c3:Exp)? "->" refutation3:".")

prefix function: Exp =
  "function" ("%" ext:AttrId)? attr:Attribute*
  "|"? p1:Pat ("when" c1:Exp)? "->"
  ((refutation:"."|r:Exp) "|" p2:Pat ("when" c:Exp)? "->")*
syncon functionRefutation: Exp =
  "function" ("%" ext:AttrId)? attr:Attribute*
  ( p1:Pat ("when" c1:Exp)? "->" refutation1:"."
  | ("|" p2:Pat ("when" c2:Exp)? "->" (refutation2:"."|r2:Exp))
    "|" p3:Pat ("when" c3:Exp)? "->" refutation3:".")

prefix fun: Exp =
  "fun" ("%" ext:AttrId)? attr:Attribute* p1:Parameter*
  ( p2: Parameter ":" ty:TypExpr
  | p3:Parameter) "->"
prefix try: Exp =
  "try" ("%" ext:AttrId)? attr:Attribute* e:Exp "with"
  "|"? p1:Pat ("when" c1:Exp)? "->"
  (r:Exp "|" p:Pat ("when" c:Exp)? "->")*

prefix let: Exp =
  "let" ("%" ext1:AttrId)? attr1:Attribute* recursive:"rec"? l:LetBinding
  ("and" ("%" ext2:AttrId)? attr2:Attribute* l2:LetBinding)*
  "in"

prefix assert: Exp = "assert" ("%" ext:AttrId)? attr:Attribute*
prefix lazy: Exp = "lazy" ("%" ext:AttrId)? attr:Attribute*
prefix letModule: Exp =
  "let" "module" ("%" ext:AttrId)? attr:Attribute* m:ModuleName
  ("(" an:ModuleName ":" amt:ModuleType ")")*
  (":" mt:ModuleType)?
  "=" me:ModuleExp "in"

syncon new: Exp = "new" ("%" ext:AttrId)? attr:Attribute* cp:ClassPath
syncon object: Exp = "object" ("%" ext:AttrId)? attr:Attribute* cb:ClassBody? "end"
postfix methodInvocation: Exp = "#" mn:MethodName
prefix instAssign: Exp = ivn:InstVarName "<-"
syncon coercion: Exp = "(" e:Exp (":" fromty:TypExpr)? ":>" ty:TypExpr ")"
syncon objectLit: Exp =
  "{<" (ivn1:InstVarName "=" e1:Exp(";" ivn2:InstVarName "=" e2:Exp)* ";"?)? ">}"

prefix letOpen: Exp = "let" "open" ("%" ext:AttrId)? attr:Attribute* mp:ModulePath "in"
syncon anonOpen: Exp = mp:ModulePath "." "(" e:Exp ")"
syncon anonOpenList: Exp = mp:ModulePath "." "[" (head:Exp (";" tail:Exp)* ";"?)? "]"  // NOTE: the informal grammar suggests that this is only valid if it's a length 1 list, but the text and compiler clarifies that it works fine for multiple elements
syncon anonOpenArray: Exp = mp:ModulePath "." "[|" (head:Exp (";" tail:Exp)* ";"?)? "|]"
syncon anonOpenRecord: Exp = mp:ModulePath "."
  "{" f1:Field (":" ty1:TypExpr)? ("=" v1:Exp)?
  (";" f2:Field (":" ty2:TypExpr)? ("=" v2:Exp)?)*
  ";"? "}"
syncon anonOpenObject: Exp = mp:ModulePath "."
  "{<" (ivn1:InstVarName "=" e1:Exp(";" ivn2:InstVarName "=" e2:Exp)* ";"?)? ">}"

prefix customPrefixOp: Exp = p:PrefixSymbol
infix customHashOp: Exp = o:HashSymbol
infix right customStarStarOp: Exp = o:StarStarSymbol
infix left customStarOp: Exp = o:StarSymbol
infix left customDivOp: Exp = o:DivSymbol
infix left customPercentOp: Exp = o:PercentSymbol
infix left customPlusOp: Exp = o:PlusSymbol
infix left customMinusOp: Exp = o:MinusSymbol
infix right customAtOp: Exp = o:AtSymbol
infix right customCaretOp: Exp = o:CaretSymbol
infix left customEqualOp: Exp = o:EqualSymbol
infix left customLessThanOp: Exp = o:LessThanSymbol
infix left customGreaterThanOp: Exp = o:GreaterThanSymbol
infix left customBarOp: Exp = o:BarSymbol
infix left customAndOp: Exp = o:AndSymbol
infix left customDollarOp: Exp = o:DollarSymbol

precedence {
  customPrefixOp;
  fieldAccess arrayAccess stringAccess;
  customHashOp methodInvocation;
  application constrExp tagExp assert lazy;
  neg negFloat prefixPlus;
  customStarStarOp lsl lsr asr;
  customStarOp customDivOp customPercentOp product mod land lor lxor;
  customPlusOp customMinusOp sum difference differenceFloat;
  consExp;
  customAtOp customCaretOp;
  customEqualOp customLessThanOp customGreaterThanOp customGreaterThanOp customBarOp customAndOp customDollarOp equal notEqual lessThan greaterThan;
  andSingle andDouble;
  orText or;
  tuple;
  fieldUpdate arrayUpdate stringUpdate refAssign instAssign;
  if;
  seqComp;
  let letModule letOpen fun match !matchRefutation function !functionRefutation try;
  trailSemi;
}
// TODO: write out forbids for "match", "function", and "try"

type LetBinding
syncon patBinding: LetBinding = p:Pat "=" e:Exp
syncon funcBinding: LetBinding = v:ValueName p1:Parameter* (p2:Parameter ":" ty1:TypExpr | p3:Parameter) (":>" ty2:TypExpr)? "=" e:Exp
syncon polyBinding: LetBinding = v:ValueName ":" ty:PolyTypExpr "=" e:Exp

type Parameter
syncon patParam: Parameter = p:Pat
syncon simpLabelParam: Parameter = ("~" l:LabelName | l2:Label)
syncon tyLabelParam: Parameter = "~" "(" l:LabelName (":" ty:TypExpr)? ")"
syncon labelPatParam: Parameter = l:LabelColon p:Pat
syncon simpOptParam: Parameter = ("?" l:LabelName | l2:OptLabel)
syncon tyOptParam: Parameter = "?" "(" l:LabelName (":" ty:TypExpr)? ("=" def:Exp)? ")"
syncon optPatParam: Parameter = l:OptLabelColon  p:Pat
syncon optPatTyParam: Parameter = ("?" l:LabelName | l2:OptLabel) ":" "(" p:Pat (":" ty:TypExpr)? ("=" def:Exp)? ")"

// === 7.8 Type and exception definitions ===

syncon typeDef: SpecAndDef =
  "type" ("%" ext1:AttrId)? attr1:Attribute* n:"nonrec"?
  tdhead:TypeDef
  ("and" ("%" ext2:AttrId)? attr2:Attribute* tdtail:TypeDef)*

type TypeParam
syncon typeParam: TypeParam = (vp:"+"|vm:"-")? "'" ty:Ident

type TypeParams
syncon oneTypeParam: TypeParams = ty:TypeParam
syncon moreTypeParams: TypeParams = "(" ty1:TypeParam ("," ty2:TypeParam)* ")"

type TypeDef
syncon typeDefSingle: TypeDef =
  tps:TypeParams?
  tyn:TypeConstrName
  ("=" eq:TypeEquation)?
  ("=" tyrepr:TypeRepr)? // type-representation
  constraints:("constraint" "'" cvar:Ident "=" cexp:TypExpr)*

type TypeEquation
syncon tyExprEqn: TypeEquation = ty:TypExpr

type TypeRepr
syncon adtRepr: TypeRepr =
  "|"? ch:ConstrDecl ("|" ct:ConstrDecl)*
syncon recordRepr: TypeRepr =
  "{" fh:FieldDecl (";" ft:FieldDecl)* ";"? "}"
syncon emptyRepr: TypeRepr = "|"

type ConstrDecl
syncon constrDecl: ConstrDecl =
  (n:ConstrName | "[" "]" | "(" "::" ")")
  ("of" ca:ConstrArgs)?

type ConstrArgs
syncon normalConstrArgs: ConstrArgs = head:TypExpr ("*" tail:TypExpr)*

type FieldDecl
syncon fieldDecl: FieldDecl =
  mut:"mutable"? n:FieldName ":"
  ty:PolyTypExpr

syncon exceptionDef: SpecAndDef =
  "exception" ("%" ext:AttrId)? attr1:Attribute* cd:ConstrDecl attr2:ItemAttribute*
syncon exceptionAlias: Def =
  "exception" n:ConstrName "=" c:Constr attr:ItemAttribute*

// === 7.9.1 Class Types ===

type ClassType
prefix classFunc: ClassType = ("?"? ln:LabelName ":")? ty:TypExpr "->"
syncon classBodyType: ClassType = cbt:ClassBodyType

type ClassBodyType
syncon objectType: ClassBodyType =
  "object" ("%" ext:AttrId)? attr:Attribute* ("(" ty:TypExpr ")")? specs:ClassFieldSpec* "end"
syncon instancedClass: ClassBodyType =
  ("(" ty1:TypExpr ("," ty2:TypExpr)* ")")? cp:ClassTypePath
prefix classLetOpen: ClassBodyType =
  "let" "open" mp:ModulePath "in"

type ClassFieldSpec
syncon inheritSpec: ClassFieldSpec = "inherit" ("%" ext:AttrId)? attr:Attribute* cbt:ClassBodyType
syncon valField: ClassFieldSpec = "val" ("%" ext:AttrId)? attr:Attribute* mut:"mutable"? virt:"virtual"? ivn:InstVarName ":" ty:TypExpr
syncon valField2: ClassFieldSpec = "val" ("%" ext:AttrId)? attr:Attribute* virt:"virtual" mut:"mutable" ivn:InstVarName ":" ty:TypExpr
syncon methodField: ClassFieldSpec = "method" ("%" ext:AttrId)? attr:Attribute* priv:"private"? virt:"virtual"? mn:MethodName ":" ty:PolyTypExpr
syncon methodField2: ClassFieldSpec = "method" ("%" ext:AttrId)? attr:Attribute* virt:"virtual" priv:"private" mn:MethodName ":" ty:PolyTypExpr
syncon constraintField: ClassFieldSpec = "constraint" ("%" ext:AttrId)? attr:Attribute* ty1:TypExpr "=" ty2:TypExpr

// === 7.9.2 Class Expressions ===

type ClassExpr
grouping "(" ClassExpr ")"
syncon classPathExpr: ClassExpr = cp:ClassPath
syncon instancedPathExpr: ClassExpr = "[" ty1:TypExpr ("," ty2:TypExpr)* "]" cp:ClassPath
syncon classTypeAssert: ClassExpr = "(" e:ClassExpr ":" ct:ClassType ")"
postfix classApplication: ClassExpr =
  ( e1:Exp
  | l1:Label (":" e2:Exp)?
  | l2:OptLabel (":" e3:Exp)?
  )+
prefix classFun: ClassExpr = "fun" ("%" ext:AttrId)? attr:Attribute* p:Parameter+ "->"
prefix classLet: ClassExpr = "let" ("%" ext:AttrId)? attr:Attribute* recursive:"rec"? lb1:LetBinding ("and" lb2:LetBinding)* "in"
syncon classObject: ClassExpr = "object" ("%" ext:AttrId)? attr:Attribute* cb:ClassBody? "end"
prefix classExprLetOpen: ClassExpr = "let" "open" mp:ModulePath "in"

type ClassBody
syncon classBodyWithPat: ClassBody =
  "(" p:Pat (":" ty:TypExpr)? ")"
  fields:ClassField*
syncon classBodyWithoutPat: ClassBody = fields:ClassField+

type ClassField
syncon inherit: ClassField = (normal:"inherit" | bang:"inherit!") ("%" ext:AttrId)? attr:Attribute* ce:ClassExpr ("as" li:LowerIdent)?
syncon valFieldExpr: ClassField = (normal:"val" | bang:"val!") ("%" ext:AttrId)? attr:Attribute* mut:"mutable"? ivn:InstVarName (":" ty:TypExpr)? "=" e:Exp
syncon virtualVal: ClassField = "val" ("%" ext:AttrId)? attr:Attribute* mut:"mutable"? "virtual" ivn:InstVarName ":" ty:TypExpr
syncon virtualVal2: ClassField = "val" ("%" ext:AttrId)? attr:Attribute* "virtual" mut:"mutable" ivn:InstVarName ":" ty:TypExpr
syncon methodPar: ClassField =
  (normal:"method" | bang:"method!") ("%" ext:AttrId)? attr:Attribute* priv:"private"?
  mn:MethodName p:Parameter* (":" ty:TypExpr)? "=" e:Exp
syncon methodPoly: ClassField =
  (normal:"method" | bang:"method!") ("%" ext:AttrId)? attr:Attribute* priv:"private"?
  mn:MethodName ":" ty:PolyTypExpr "=" e:Exp
syncon virtualMethod: ClassField =
  (normal:"method" | bang:"method!") ("%" ext:AttrId)? attr:Attribute* priv:"private"? "virtual"
  mn:MethodName ":" ty:PolyTypExpr
syncon virtualMethod2: ClassField =
  (normal:"method" | bang:"method!") ("%" ext:AttrId)? attr:Attribute* "virtual" "private"
  mn:MethodName ":" ty:PolyTypExpr
syncon constraintExprField: ClassField = "constraint" ty1:TypExpr "=" ty2:TypExpr
syncon initializer: ClassField = "initializer" ("%" ext:AttrId)? attr:Attribute* e:Exp

// === 7.9.3 Class definitions ===

syncon classDef: Def = "class" ("%" ext:AttrId)? attr:Attribute* cb1:ClassBinding ("and" cb2:ClassBinding)*

type ClassBinding
syncon classBinding: ClassBinding =
  virt:"virtual"? ("[" "'" i1:Ident ("," "'" i2:Ident)* "]")?
  cn:ClassName p:Parameter* (":" ct:ClassType)? "=" ce:ClassExpr

// === 7.9.4 Class specifications ===

syncon classSpec: Spec = "class" ("%" ext:AttrId)? attr:Attribute* cs1:ClassSpec ("and" cs2:ClassSpec)*

type ClassSpec
syncon classSpecBody: ClassSpec =
  virt:"virtual"? ("[" "'" i1:Ident ("," "'" i2:Ident)* "]")?
  cn:ClassName ":" ct:ClassType

// === 7.9.5 Class type definitions ===

syncon classTypeDef: SpecAndDef = "class" "type" ("%" ext:AttrId)? attr:Attribute* ctd1:ClassTypeDef ("and" ctd2:ClassTypeDef)*

type ClassTypeDef
syncon classTypeDefBody: ClassTypeDef =
  virt:"virtual"? ("[" "'" i1:Ident ("," "'" i2:Ident)* "]")?
  cn:ClassName "=" cbt:ClassBodyType

// === 7.10 Module Types (module specifications) ===

type ModuleType
grouping "(" ModuleType ")"

syncon modTypePathTy: ModuleType = p:ModTypePath
syncon modSig: ModuleType = "sig" attr:Attribute* (s:Spec ";;"?)* "end"
prefix functorType: ModuleType = "functor" ("%" ext:AttrId)? attr:Attribute* "(" mn:ModuleName ":" mt:ModuleType ")" "->"
infix right unnamedFunctorType: ModuleType = "->"
postfix modConstraint: ModuleType = "with" head:ModuleConstraint ("and" tail:ModuleConstraint)*

type ModuleConstraint
syncon modTypeConstraint: ModuleConstraint =
  "type"
  tps:TypeParams?
  tyc:TypeConstr
  "=" tye:TypeEquation
  constraints:("constraint" "'" cvar:Ident "=" cexp:TypExpr)*
syncon modModConstraint: ModuleConstraint =
  "module" mp:ModulePath "=" emp:ExtendedModulePath

type Spec
type SpecAndDef
syncon sharedSpec: Spec = s:SpecAndDef
syncon val: Spec = "val" ("%" ext:AttrId)? attr1:Attribute* vn:ValueName ":" ty:TypExpr attr2:ItemAttribute*
syncon modDecl: Spec =
  "module" ("%" ext:AttrId)? attr1:Attribute* mn:ModuleName
  ("(" argn:ModuleName ":" argty:ModuleType ")")*
  ":" mty:ModuleType
  attr2:ItemAttribute*
syncon modTypeDecl: Spec = "module" "type" mn:ModuleName attr:ItemAttribute*
syncon includeModType: Spec = "include" ("%" ext:AttrId)? attr1:Attribute* mty:ModuleType attr2:ItemAttribute*

syncon external: SpecAndDef =
  "external" ("%" ext:AttrId)? attr1:Attribute* vn:ValueName ":" ty:TypExpr "=" e1:String (e2:String e3:String?)? attr2:ItemAttribute*
syncon openMod: SpecAndDef = "open" ("%" ext:AttrId)? attr1:Attribute* mp:ModulePath attr2:ItemAttribute*
syncon modTypeAlias: SpecAndDef =
  "module" "type" ("%" ext:AttrId)? attr1:Attribute* mn:ModTypeName "=" mty:ModuleType attr2:ItemAttribute*

// === 7.11 Module expressions (module implementations) ===

type ModuleExp
grouping "(" ModuleExp ")"

syncon modExprPath: ModuleExp = mp:ModulePath
syncon struct: ModuleExp =
  "struct" ("%" ext:AttrId)? attr:Attribute*
  (";;"* (dh:Def | eh:Exp) (";;"* (dt:Def | ";;" et:Exp))* ";;"*)?
  "end"
prefix functor: ModuleExp =
  "functor" ("%" ext:AttrId)? attr:Attribute* "(" argn:ModuleName ":" argty:ModuleType ")" "->"
postfix functorApp: ModuleExp =
  "(" arg:ModuleExp ")"
syncon modTypeAssert: ModuleExp =
  "(" me:ModuleExp ":" mty:ModuleType ")"

type Def
syncon sharedDef: Def = s:SpecAndDef
syncon defLet: Def =
  "let" ("%" ext1:AttrId)? attr1:Attribute* recursive:"rec"?  l:LetBinding
  ("and" ("%" ext2:AttrId)? attr2:Attribute* l2:LetBinding)*
syncon modDef: Def =
  "module" ("%" ext:AttrId)? attr1:Attribute* mn:ModuleName
  ("(" pn:ModuleName ":" pty:ModuleType ")")*
  (":" mty:ModuleType)?
  "=" me:ModuleExp
  attr2:ItemAttribute*
syncon includeModExp: Def = "include" ("%" ext:AttrId)? attr1:Attribute* me:ModuleExp attr2:ItemAttribute*

// === 7.12 Compilation units ===

syncon unitImplementation: Top =
  ";;"* (dh:Def | eh:Exp ia1:ItemAttribute*) (";;"* (dt:Def | ";;" et:Exp ia2:ItemAttribute*))* ";;"*  // NOTE: technically there should be a ? around the entire thing

// syncon unitInterface: Top = (s:Spec ";;"?)*

// === 8.4 Recursive modules ===

syncon recursiveModuleDef: Def =
  "module" ("%" ext1:AttrId)? attr1:Attribute* "rec" mn:ModuleName ":" mty:ModuleType "=" me:ModuleExp attr2:ItemAttribute*
  ("and" ("%" ext2:AttrId)? attr3:Attribute* mn2:ModuleName ":" mty2:ModuleType "=" me2:ModuleExp attr4:ItemAttribute*)*

syncon recursiveModuleSpec: Spec =
  "module" ("%" ext1:AttrId)? attr1:Attribute* "rec" mn:ModuleName ":" mty:ModuleType
  ("and" ("%" ext2:AttrId)? attr2:Attribute* mn2:ModuleName ":" mty2:ModuleType)*

// === 8.5.1 Private variant and record types ===

syncon privateAdtRepr: TypeRepr =
  "private" "|"? ch:ConstrDecl ("|" ct:ConstrDecl)*
syncon privateRecordRepr: TypeRepr =
  "private" "{" fh:FieldDecl (";" ft:FieldDecl)* ";"? "}"

// === 8.5.2 Private type abbreviations ===

syncon privateTypeEqn: TypeEquation = "private" ty:TypExpr

// === 8.8 Locally abstract types ===

syncon tyParam: Parameter = "(" "type" n:TypeConstrName+ ")"
syncon polyLet: LetBinding = vn:ValueName ":" "type" n:TypeConstrName+ "." ty:TypExpr "=" e:Exp

// === 8.9 First-class modules ===

syncon modTypExpr: TypExpr = "(" "module" ("%" ext:AttrId)? attr:Attribute* pt:PackageType ")"

syncon moduleUnpack: ModuleExp = "(" "val" ("%" ext:AttrId)? attr:Attribute* e:Exp (":" pt:PackageType)? ")"

syncon modulePack: Exp = "(" "module" me:ModuleExp (":" pt:PackageType)? ")"

syncon modulePat: Pat = "(" "module" mn:ModuleName (":" pt:PackageType)? ")"

type PackageType

syncon packageType: PackageType =
  mtp:ModTypePath ("with" pc1:PackageConstraint ("and" pc2:PackageConstraint)*)?

type PackageConstraint
syncon packageConstraint: PackageConstraint = "type" tc:TypeConstr "=" ty:TypExpr

// === 8.9 Recovering the type of a module ===

syncon modTypeOf: ModuleType = "module" "type" "of" attr:Attribute* me:ModuleExp

// === 8.11 Substituting inside a signature ===

syncon destructType: ModuleConstraint = "type" tp:TypeParams? tyn:TypeConstrName ":=" ty:TypExpr
syncon destructModule: ModuleConstraint = "module" mp:ModulePath ":=" emp:ExtendedModulePath

// === 8.12 Type-level module aliases ===

syncon modAlias: Spec = "module" ("%" ext:AttrId)? attr:Attribute* mn:ModuleName "=" mp:ModulePath

// === 8.14 Generalized algebraic datatypes ===

syncon gadtConstr: ConstrDecl =
  n:ConstrName ":" (h:TypExpr ("*" t:TypExpr)* "->")? ty:TypExpr

syncon ignoredTypeParam: TypeParam = (vp:"+"|vm:"-")? "_"

// === 8.16 Attributes ===

type AttrId
syncon lowerAttr: AttrId = n:LowerIdent
syncon upperAttr: AttrId = n:UpperIdent
infix left attrDot: AttrId = "."

type AttrPayload
syncon attrItems: AttrPayload = ";;"* (dh:Def | eh:Exp) (";;"* (dt:Def | ";;" et:Exp))* ";;"*
syncon attrTy: AttrPayload = ":" ty:TypExpr
syncon attrSpec: AttrPayload = ":" spec:Spec?
syncon attrPat: AttrPayload = "?" p:Pat ("when" e:Exp)?

type Attribute
syncon attribute: Attribute = "[@" ai:AttrId ap:AttrPayload? "]"

postfix expAttr: Exp = a:Attribute
postfix typExpAttr: TypExpr = a:Attribute
postfix patAttr: Pat = a:Attribute
postfix modExprAttr: ModuleExp = a:Attribute
postfix modTyAttr: ModuleType = a:Attribute
postfix classExpAttr: ClassExpr = a:Attribute
postfix classTyAttr: ClassType = a:Attribute

syncon fieldDeclAttr: FieldDecl = mut:"mutable" fn:FieldName ":" ty:PolyTypExpr attr:Attribute+
syncon constrDeclAttr: ConstrDecl = (cn:ConstrName | "()") ("of" ca:ConstrArgs)? attr:Attribute+

type ItemAttribute
syncon itemAttribute: ItemAttribute = "[@@" ai:AttrId ap:AttrPayload? "]"

postfix typeDefAttr: TypeDef = a:ItemAttribute
postfix classBindingAttr: ClassBinding = a:ItemAttribute
postfix classSpecAttr: ClassSpec = a:ItemAttribute
postfix classTypeDefAttr: ClassTypeDef = a:ItemAttribute
postfix classFieldSpecAttr: ClassFieldSpec = a:ItemAttribute
postfix classFieldAttr: ClassField = a:ItemAttribute

type FloatingAttribute
syncon floatingAttribute: FloatingAttribute = "[@@@" ai:AttrId ap:AttrPayload? "]"

syncon floatingSpecAndDef: SpecAndDef = a:FloatingAttribute
syncon floatingClassFieldSpec: ClassFieldSpec = a:FloatingAttribute
syncon floatingClassField: ClassField = a:FloatingAttribute

forbid classFieldSpecAttr.left = floatingClassFieldSpec
forbid classFieldAttr.left = floatingClassField

// === 8.17 Extension nodes ===

type Extension
syncon extension: Extension = "[%" id:AttrId payload:AttrPayload? "]"

syncon expExt: Exp = e:Extension
syncon tyExt: TypExpr = e:Extension
syncon patExt: Pat = e:Extension
syncon modExt: ModuleExp = e:Extension
syncon modTyExt: ModuleType = e:Extension
syncon classExprExt: ClassExpr = e:Extension
syncon classTypeExt: ClassType = e:Extension

type ItemExtension
syncon itemExtension: ItemExtension = "[%%" id:AttrId payload:AttrPayload "]"

syncon defAndSpecExt: SpecAndDef = e:ItemExtension
syncon classFieldSpecExt: ClassFieldSpec = e:ItemExtension
syncon classFieldExt: ClassField = e:ItemExtension

// ==== 8.19 Exception cases in pattern matching ===

prefix exceptionPat: Pat = "exception" ("%" ext:AttrId)? attr:Attribute*

// === 8.20 Extensible variant types ===

syncon extensibleRepr: TypeRepr = ".."

syncon extensibleSpec: Spec = "type" ("%" ext:AttrId)? attr:Attribute* tp:TypeParams? tyc:TypeConstr tes:TypeExtensionSpec

syncon extensibleDef: Def = "type" ("%" ext:AttrId)? attr:Attribute* tp:TypeParams? tyc:TypeConstr ted:TypeExtensionDef

type TypeExtensionSpec
syncon typeExtensionSpec: TypeExtensionSpec =
  "+=" private:"private"? "|"? cd1:ConstrDecl ("|" cd2:ConstrDecl)*

type TypeExtensionDef
syncon typeExtensionDef: TypeExtensionDef =
  "+=" private:"private"? "|"? cd1:ConstrDef ("|" cd2:ConstrDef)*

type ConstrDef
syncon constrDeclDef: ConstrDef = cd:ConstrDecl
syncon constrDefEq: ConstrDef = cn:ConstrName "=" c:Constr

// === 8.23 Inline records ===

syncon inlineRecord: ConstrArgs = "{" fh:FieldDecl (";" ft:FieldDecl)* ";"? "}"

// === Appendix: added stuff for syncons ===

// Applications are rewritten slightly, "argument" is inlined, to get nicer forbids
forbid application.left = application
forbid application.e1 = application
forbid application.e2 = application
forbid application.e3 = application
forbid application.e1 = constrExp
forbid application.e2 = constrExp
forbid application.e3 = constrExp

forbid application.left = constrLit
forbid application.left = tagLit

// forbid fun.p3 = labelPatParam
// forbid fun.ty = unaryTypeConstr
// forbid funcBinding.p3 = labelPatParam
// forbid funcBinding.ty1 = unaryTypeConstr

// we actually want these to be forbids on lrec, and that the forbid goes down transitively to rrecs beneath it
forbid arrayAccess.left = constrLit
forbid fieldAccess.left = constrLit

forbid list.head = seqComp
forbid list.tail = seqComp
forbid list.head = trailSemi
forbid list.tail = trailSemi
forbid array.head = seqComp
forbid array.tail = seqComp
forbid array.head = trailSemi
forbid array.tail = trailSemi

forbid record.val = seqComp
forbid record.valt = seqComp
forbid record.val = trailSemi
forbid record.valt = trailSemi
forbid recordUpdate.v1 = seqComp
forbid recordUpdate.v2 = seqComp
forbid recordUpdate.v1 = trailSemi
forbid recordUpdate.v2 = trailSemi
forbid anonOpenRecord.v1 = seqComp
forbid anonOpenRecord.v2 = seqComp
forbid anonOpenRecord.v1 = trailSemi
forbid anonOpenRecord.v2 = trailSemi

forbid tuple.left = tuple
forbid tuple.inner = tuple
forbid tuple.right = tuple

forbid prodType.left = prodType
forbid prodType.inner = prodType
forbid prodType.right = prodType

forbid tupPat.left = tupPat
forbid tupPat.inner = tupPat
forbid tupPat.right = tupPat

forbid normalConstrArgs.head = prodType
forbid normalConstrArgs.tail = prodType

forbid gadtConstr.ty = funType
forbid gadtConstr.h = prodType
forbid gadtConstr.t = prodType

forbid if.t = seqComp

forbid labeledFunType.a = funType
forbid labeledFunType.a = labeledFunType

// Tokens: I disallowed a preceeding minus in integers, instead relying on unary negation

// trailing semicolons in most places where a sequence of expressions is expected. I suspect the implementation isn't really semicolon as an infix operator at all, but rather a (optionally semicolon terminated) semicolon-separated list of expressions in certain locations
postfix trailSemi: Exp = ";" // This is also inserted in the precedence list, at lowest precedence. it is possible that this means that we parse more things than ocaml proper does
forbid trailSemi.left = trailSemi
forbid application.left = trailSemi

// This section more or less implements longest match. In Iguana this is accomplished by "!>> '|'", which means "don't accept this if it is followed by '|'. We probably need something like that as well...
forbid match.r = match
forbid match.r = function
forbid match.r = try
forbid function.r = match
forbid function.r = function
forbid function.r = try
forbid try.r = match
forbid try.r = function
forbid try.r = try

forbid tupPat.inner = orPat

prefix prefixPlus: Exp = "+"

// I made if into a prefix operator, which makes the shape of the ast a little bit weird (when if.t has an entry, if.right is the else branch, otherwise it's the then branch)
// similar changes to match, try, and function
// fun is similarly made into a prefix operator, but the thing that we would logically consider the body is always located at fun.right, so it's not as weird

forbid methodPoly.ty = nonPoly

// Applications in types (type constructor and class application) on multiple arguments are written as TypExpr ("," TypExpr)*, but the star means ambiguity with grouping parens, thus those are written as + instead.

// When defining functions (using let) with label arguments, parse either two tokens "~" Ident or one token Label (this is essentially how they do it, but we're explicit about it here)

// Module type expressions don't have a precedence table, but definitiely need one. Here's what it seems like it should be, but I don't have confirmation that it is accurate
precedence {
  functorType unnamedFunctorType;
}
// Same for module expressions
precedence {
  functorApp;
  functor;
}

// ClassBody is split in two to make them non-nullable, then each occurrence of it is written ClassBody? instead of merely ClassBody. Same for AttrPayload.

// item-attributes are added in semi-weird places, here are the syncons that are modified to include them:
// - unitImplementation
// - external
// - exceptionDef
// - exceptionAlias
// - modDef
// - modTypeAlias
// - openMod
// - includeModExp
// - val
// - modDecl
// - modTypeDecl
// - includeModType

forbid modTyAttr.left = modTypeOf  // This is actually some form of precedence, the attr should bind to the rhs instead of the modtypeof

forbid normalConstrArgs.head = typExpAttr  // TODO: this should actually only place the forbid on the last thing
forbid normalConstrArgs.tail = typExpAttr

postfix bindingAttribute: LetBinding = attr:ItemAttribute

// attributes are added as "infix" things in certain places as well, but the manual isn't particularly clear on exactly where. The following syncons have been altered to add such things
// same for extension nodes
// - beginEnd
// - let
// - letModule
// - letOpen
// - fun
// - function
// - functionRefutation
// - try
// - if
// - while
// - for
// - assert
// - lazy
// - object
// - new
// - match
// - matchRefutation
// - lazyPat
// - exceptionPat
// - classFun
// - classLet
// - classObject
// - inherit
// - valField
// - valField2
// - valFieldExpr
// - virtualVal
// - virtualVal2
// - methodField
// - methodField2
// - methodPar
// - methodPoly
// - virtualMethod
// - virtualMethod2
// - initializer
// - objectType
// - inheritSpec
// - constraintField
// - modTypExpr
// - functor
// - moduleUnpack
// - struct
// - functorType
// - modTypeOf
// - modSig
// - defLet
// - typeDef
// - extensibleDef
// - extensibleSpec
// - classDef
// - classTypeDef
// - external
// - exceptionDef
// - modDef
// - recursiveModuleDef
// - modTypeAlias
// - includeModExp
// - openMod
// - val
// - modDecl
// - recursiveModuleDef
// - recursiveModuleSpec
// - modAlias
// - includeModType
// - classSpec

// labelled arguments upon which pattern matching happens are rewritten using LabelColon and OptLabelColon, since the ocaml compiler requires there not to be a space between label and colon

// The manual states that TagName (tag-name) should be capitalized-ident, but usage clearly shows that it can also be lowercase-ident...
