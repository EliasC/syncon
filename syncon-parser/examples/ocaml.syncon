type Exp  // Expressions
type Pat  // Patterns

// Identifiers
token Ident = "[[:lower:]][[:word:]]*"
token Integer = "[0-9]+"
token String = "\"(\\\\.|[^\"\\\\])*\""

syncon topLet: Top =
  "let" x:Ident args:Pat*
  "=" e:Exp ";;"?

syncon topLetRec: Top =
  "let" "rec" x:Ident args:Pat*
  "=" e:Exp
  more:("and" x2:Ident args2:Pat*
        "=" e2:Exp)* ";;"?

syncon letExp: Exp =
  "let" x:Ident args:Pat*
  "=" e:Exp "in" body:Exp

syncon letRecExp: Exp =
  "let" "rec" x:Ident args:Pat*
  "=" e:Exp "in" body:Exp

syncon match: Exp =
  "match" e:Exp "with"
  arm:("|" p:Pat "->" body:Exp)+

// For "infix", the name can be preceeded by "left" or "right" to
// specify associativity
// The default is no associativity i.e., always group explicitly
infix left sum:Exp = "+"
infix left difference:Exp = "-"
infix left product:Exp = "*"
infix equal:Exp = "="
infix leq:Exp = "<="

infix left funApp: Exp = // Intentionally left blank

infix right cons:Exp = "::"
infix right seqComp:Exp = ";"

// Totally define precedence for certain operators. Those on the
// same line get the same precedence, those on higher lines have
// higher precedence.
// If two infix operators on the same line have differing associativity,
// (or at least one has "none") then they will need to be grouped
// explicitly, otherwise they'll associate together, so to speak.
precedence {
  funApp;
  product;
  sum difference;
  cons;
  equal leq;
  seqComp;
}
// Note that precedence isn't transitive, and there is no way to
// specify that a given operator should behave exactly the same
// as some other operator. The former I'm fairly sure is as it should
// be, but the latter might be desireable, at least in some weakened
// form, maybe grouping operators or something.

// An additional feature with precedence lists, not shown here, is
// that you can specify exceptions, e.g.
//   precedence {
//     a b;
//     c d;
//   } except {
//     a d;
//   }
// defines total precedence amongst 'a', 'b', 'c', and 'd', except
// 'a' and 'd' get no defined precedence.

syncon variable: Exp = v:Ident
syncon unitLit: Exp = "()"
syncon trueLit: Exp = "true"
syncon falseLit: Exp = "false"
syncon intLit: Exp = i:Integer
syncon stringLit: Exp = s:String

syncon list: Exp =
  "[" (head: Exp (";" tail: Exp)*)? "]"

// A specific occurence of a syntax-type can be restricted to
// not be a specific syncon. This is the one underlying
// primitive, but there are nicer ways to write this for
// precedence and associativity
forbid list.head = seqComp
forbid list.tail = seqComp

syncon function: Exp =
  "fun" args:Pat+ "->" body:Exp

syncon intPat: Pat = i:Integer
syncon stringPat: Pat = s:String
syncon truePat: Pat = "true"
syncon falsePat: Pat = "false"
syncon bindPat: Pat = id:Ident
syncon wildcardPat: Pat = "_"
syncon listPat: Pat =
  "[" (p:Pat (";" ps:Pat)*)? "]"

infix right consPat: Pat = "::"


forbid funApp.left = match
forbid sum.left = match
forbid seqComp.left = match
forbid funApp.left = letRecExp
