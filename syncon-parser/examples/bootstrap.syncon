// This file contains an attempt at defining the syntax of a syncon
// language definition, using a syncon language definition. Note that
// it does not cover bindings nor spliced syntax in the body

// Posix character classes in token definitions
token Name = "[[:lower:]][[:word:]]*"
token TypeName = "[[:upper:]][[:word:]]*"
token String = "\"(\\\\.|[^\"\\\\])*\""

comment "//[^\\n]*(\\n|$)"

// === Syntax Types ===

syncon typeDef: Top = "type" syType:TypeName

// === Token Definitions ===

syncon tokenDef: Top = "token" syType:TypeName "=" regex:String

// === Comment Definitions ===

syncon commentDef: Top = "comment" regex:String

// === Syncon Definitions (including operators) ===

syncon synconDef: Top =
  "syncon" name:Name ":" syType:TypeName "="
  descr:SyntaxDescription+ ("{" body:SynconBody "}")?

syncon prefixDef: Top =
  "prefix" name:Name ":" syType:TypeName "="
  descr:SyntaxDescription+ ("{" body:SynconBody "}")?

syncon postfixDef: Top =
  "postfix" name:Name ":" syType:TypeName "="
  descr:SyntaxDescription+ ("{" body:SynconBody "}")?

syncon infixDef: Top =
  "infix" assoc:("left" | "right")? name:Name ":" syType:TypeName "="
  descr:SyntaxDescription* ("{" body:SynconBody "}")?

type SynconBody
syncon builtinBody: SynconBody = "builtin"

// === Properties ===

type Property


// === Syntax Descriptions ===

type SyntaxDescription

// TODO: This might be problematic?
syncon sdSeq: SyntaxDescription =
  "(" head:SyntaxDescription tail:SyntaxDescription+ ")"

postfix sdStar: SyntaxDescription = "*"
postfix sdPlus: SyntaxDescription = "+"
postfix sdQuestion: SyntaxDescription = "?"

syncon sdAlt: SyntaxDescription = left:rec+ ("|" right:rec+)+
forbid sdAlt.left = sdAlt
forbid sdAlt.right = sdAlt

prefix sdName: SyntaxDescription = name:(Name | "left" | "right") ":"

precedence {
  sdName;
  sdStar sdPlus sdQuestion;
  sdAlt;
}

syncon sdLitToken: SyntaxDescription = tok:String
syncon sdSyTy: SyntaxDescription = name:TypeName
syncon sdRec: SyntaxDescription = "rec"


// === Disambiguation ===

syncon forbidDef: Top =
  "forbid" syName:Name "." sdName:(Name | "left" | "right") "=" syName2:Name


syncon precedenceList: Top =
  "precedence" "{" line:(name:Name+ ";")+ "}"
  ("except" "{" eLine:(eName:Name+ ";")+ "}")?
