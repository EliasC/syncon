// This file contains an attempt at defining the syntax of a syncon
// language definition, using a syncon language definition. Note that
// it does not cover bindings nor spliced syntax in the body

type Top

// Posix character classes in token definitions
token Name = "[[:lower:]][[:word:]]*"
token TypeName = "[[:upper:]][[:word:]]*"
token String = "\"(\\\\.|[^\"\\\\])*\""

comment "//[^\\n]*(\\n|$)"

// === Syntax Types ===

syncon typeDef: Top =
  "type" syType:TypeName
{ builtin }

// === Token Definitions ===

syncon tokenDef: Top =
  "token" syType:TypeName "=" regex:String
{ builtin }

// === Comment Definitions ===

syncon commentDef: Top =
  "comment" regex:String
{ builtin }

// === Syncon Definitions (including operators) ===

syncon synconDef: Top =
  "syncon" name:Name ":" syType:TypeName "="
  descr:SyntaxDescription+ "{" (Property ";")* "builtin" "}"
{ builtin }

syncon prefixDef: Top =
  "prefix" name:Name ":" syType:TypeName "="
  descr:SyntaxDescription+ "{" (Property ";")* "builtin" "}"
{ builtin }

syncon postfixDef: Top =
  "postfix" name:Name ":" syType:TypeName "="
  descr:SyntaxDescription+ "{" (Property ";")* "builtin" "}"
{ builtin }

syncon infixDef: Top =
  "infix" name:Name ":" syType:TypeName "="
  descr:SyntaxDescription* "{" (InfixProperty ";")* "builtin" "}"
{ builtin }


// === Properties ===

type Property
type InfixProperty // Here I would like to have some form of subtyping or inclusion or something

syncon assoc: InfixProperty = "#assoc" a:Assoc { builtin }
type Assoc
syncon assocLeft: Assoc = "left" { builtin }
syncon assocRight: Assoc = "right" { builtin }


// === Syntax Descriptions ===

type SyntaxDescription

// TODO: This might be problematic?
syncon sdSeq: SyntaxDescription =
  "(" head:SyntaxDescription tail:SyntaxDescription+ ")"
{ builtin }

postfix sdStar: SyntaxDescription = "*" { builtin }
postfix sdPlus: SyntaxDescription = "+" { builtin }
postfix sdQuestion: SyntaxDescription = "?" { builtin }

syncon sdAlt: SyntaxDescription = l:SyntaxDescription+ ("|" r:SyntaxDescription+)+ { builtin }

prefix sdName: SyntaxDescription = name:Name ":" { builtin }

precedence {
  sdName;
  sdStar sdPlus sdQuestion;
}
forbid sdAlt.l = sdAlt
forbid sdAlt.r = sdAlt
forbid sdStar.left = sdAlt
forbid sdPlus.left = sdAlt
forbid sdQuestion.left = sdAlt
forbid sdName.right = sdAlt

syncon sdLitToken: SyntaxDescription = tok:String { builtin }
syncon sdSyTy: SyntaxDescription = name:TypeName { builtin }


// === Disambiguation ===

syncon forbidDef: Top =
  "forbid" syName:Name "." sdName:(Name | "left" | "right") "=" syName2:Name
{ builtin }

syncon precedenceList: Top =
  "precedence" "{" line:(name:Name+ ";")+ "}"
  ("except" "{" eLine:(eName:Name+ ";")+ "}")?
{ builtin }
